shiny::runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
library(shiny)
library(plyr)
library(plotly)
library(scales)
library(ggplot2)  # For creating pretty plots
library(dplyr)  # For filtering and manipulating data
library(tidyverse)
etudiants <- read.csv(file = 'D:/MARATHON_WEB_Group7/Codes/Graphiques/data/donnees_etudiants.csv', dec = ",", encoding='UTF-8-BOM')
recruteurs <- read.csv(file = 'D:/MARATHON_WEB_Group7/Codes/Graphiques/data/donnees_recruteurs.csv', dec = ",", encoding='UTF-8')
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$plot <- renderPlot({
etudiants1 <- filter(etudiants, Regime_inscription %in% c("apprentis", "cont prof" ), Annee==input$anInput)
ggplot(etudiants1, aes(x = Formation)) +
geom_histogram(stat = 'count')+
theme(axis.text.x = element_text(angle=65, hjust=1) , plot.title = element_text(color='#A42300', size = 18, hjust = 0.5)) +
labs(x= 'Formations', "Nombre d'étudiants") +
ggtitle("Le nombre d'alternant dans chaque formations année par année")
})
output$recrut <- renderPlot ({
# write code here to read data from csv file
aprenticecount <- as.data.frame(table(recruteurs$NOM_ENTREPRISE))
#top 10
top10<- aprenticecount[order(aprenticecount$Freq, decreasing=T)[1:10],]
# Set x and y axis and display data in bar chart using plotly
ggplot(top10, aes(x= reorder(Var1, Freq), y=Freq)) +
geom_col() +
theme(axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(color='#A42300', size = 18, hjust = 0.5)) +
scale_fill_ipsum() +
coord_flip() +
labs(x = "Structure") +
ggtitle("Top 10 des structures qui ont recrutés le plus d’alternants depuis 2016 toutes formations confondues")
})
})
library(shiny)
library(plyr)
library(plotly)
library(scales)
library(ggplot2)  # For creating pretty plots
library(dplyr)  # For filtering and manipulating data
library(tidyverse)
etudiants <- read.csv(file = 'D:/MARATHON_WEB_Group7/Codes/Graphiques/data/donnees_etudiants.csv', dec = ",", encoding='UTF-8-BOM')
recruteurs <- read.csv(file = 'D:/MARATHON_WEB_Group7/Codes/Graphiques/data/donnees_recruteurs.csv', dec = ",", encoding='UTF-8')
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$plot <- renderPlot({
etudiants1 <- filter(etudiants, Regime_inscription %in% c("apprentis", "cont prof" ), Annee==input$anInput)
ggplot(etudiants1, aes(x = Formation)) +
geom_histogram(stat = 'count')+
theme(axis.text.x = element_text(angle=65, hjust=1) , plot.title = element_text(color='#A42300', size = 18, hjust = 0.5)) +
labs(x= 'Formations', "Nombre d'étudiants") +
ggtitle("Le nombre d'alternant dans chaque formations année par année")
})
output$recrut <- renderPlot ({
# write code here to read data from csv file
aprenticecount <- as.data.frame(table(recruteurs$NOM_ENTREPRISE))
#top 10
top10<- aprenticecount[order(aprenticecount$Freq, decreasing=T)[1:10],]
# Set x and y axis and display data in bar chart using plotly
ggplot(top10, aes(x= reorder(Var1, Freq), y=Freq)) +
geom_col() +
theme(axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(color='#A42300', size = 18, hjust = 0.5)) +
scale_fill_ipsum() +
coord_flip() +
labs(x = "Structure") +
ggtitle("Top 10 des structures qui ont recrutés le plus d’alternants depuis 2016 toutes formations confondues")
})
})
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(plyr)
library(plotly)
library(scales)
library(ggplot2)  # For creating pretty plots
library(dplyr)  # For filtering and manipulating data
etudiants <- read.csv(file = 'D:/MARATHON_WEB_Group7/Codes/Graphiques/data/donnees_etudiants.csv', dec = ",")
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Nombre alternants"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "anInput",
label = "Sélectionner une année : ",
choices = c("2016-2017"="2017", "2017-2018"="2018", "2018-2019"="2019", "2019-2020"="2020", "2020-2021"="2021",
"2021-2022"="2022"),
selected = c("2016-2017"="2017", "2017-2018"="2018", "2018-2019"="2019", "2019-2020"="2020", "2020-2021"="2021",
"2021-2022"="2022"),
multiple = TRUE
),
),
mainPanel(
plotOutput("plot"),
plotOutput('recrut')
)
)
))
runApp()
install.packages("hrbrthemes")
runApp()
shiny::runApp()
data
etudiants
runApp()
filter
etudiants1
runApp()
runApp()
shiny::runApp()
runApp('Evolution/Evolution')
install.packages('kableExtra')
install.packages('streamgraph')
install.packages('viridis')
runApp('Evolution/Evolution')
install.packages('streamgraph')
runApp('Evolution/Evolution')
install.packages('hbrrmstr')
install.packages('hrbrmstr')
runApp('Evolution/Evolution')
runApp('Evolution/Evolution')
etudiants1 <- filter(etudiants, Regime_inscription %in% c("apprentis", "cont prof"), Formation == input$formation2)
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(DT)
library(plotly)
library(shiny)
etudiants <- read.csv(file = 'D:/Marathon_web_2022/Codes/Graphiques/data/donnees_etudiants.csv', dec = ",", encoding="UTF-8")
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "formation2",
label = "Sélectionner une formation",  # Give the input a label to be displayed in the app
choices = etudiants$Formation)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
