3+5
((3+6+9)/3 -(2*8)^2)/4
3 <2
x <- 2
x
2->x
2
x
y
x+x
z=x+x
z
x <- 8
x>3
a <- 2
b=3
c= (exp(b)* sqrt(log(a)))^(-b/a)
c
setwd("~/L3S6stat/TP1")
`setwd("~/L3S6stat/TP1")`
z
z
print(z)
z
z <- c(1.25, 0.25, 5.34)
z
s <- c("bleu","vert","marron")
s
z*2
z[2:3]
print(bmi= poids/taille^2)
poids = c(60,72,57,90, 95, 72)
taille = c(1.75, 1.80, 1.65, 1.5, 1.74, 1.91)
bmi= poids/taille^2
bmi
rpois
a <- rpois(10,10)
boxplot()
boxplot(a)
b <- table(a)
barplot(b)
dpois(a)
dpois(10,10)
?dpois()
dpois(b,10)
theo <- dpois(b,10)
barplot(theo)
n = 10
lambda = 10
a = rpois(n,lambda)
a = rpois(n,lambda)
summary(a) #donne tous les quartiles
boxplot(a)
b <- table(a)
theo <- dpois(summary(a),10) #calculer distribution théorique avec les quantiles
theo <- dpois(b,10) #calculer distribution théorique avec les quantiles
theo <- dpois(b,10)
barplot(theo)
dpois(b,10)
dpois(b,10)
a = rpois(n,lambda)
dpois(b,10)
b <- table(a)/n #calculer les fréquences
table(a)/n
barplot(b)
dpois(b,10)
summary(a)
?rbern()
?prob()
dbern()
?rpois
?rbern
dpois(x=0:30,10)
barplot(theo) #diagramme en baton de la distribution théorique
names(theo) <- 0:30
barplot(theo
barplot(theo)
#5)
names(theo) <- 0:31
theo <- dpois(x=0:30,10) #calculer distribution théorique avec les quantiles
#5)
names(theo) <- 0:30
source('~/Documents/L3S6stat/beteille.lisa.TP2.R')
names(theo) <- 0:30
names(theo) <- 0:30
names(theo) <- 0:30
names(theo) <- 0:30
names(theo) <- 0:30
barplot(theo)
barplot(theo, col="orange") #diagramme en baton de la distribution théorique
barplot(theo, col="pink") #diagramme en baton de la distribution théorique
barplot(theo, col="blue") #diagramme en baton de la distribution théorique
barplot(theo, col="purple") #diagramme en baton de la distribution théorique
b <- table(a)/n #calculer la distribution empirique
table(a)/n
barplot(b)
dist_emp =table(a)/n #calculer la distribution empirique
barplot(dist_emp)
dist_emp =table(a)/n #calculer la distribution empirique
barplot(dist_emp, col="pink")
barplot(rbind (dist_emp,theo), beside=TRUE, col = ("purple", "pink"))
barplot(rbind (dist_emp,theo), beside=TRUE, col = c("purple", "pink"))
barplot(dist_emp, col="blue") #représenter le diagramme en baton de b
barplot(rbind (dist_emp,theo), beside=TRUE, col = c("purple", "pink"))
barplot(theo, col="purple")
names(theo) <- 0:20 #les valeurs en en absisse de 0 à 30
barplot(rbind (dist_emp,theo), beside=TRUE, col = c("purple", "pink"))
names(theo)
theo <- dpois(x=0:20,10) #calculer distribution théorique avec les quantiles
#5)
names(theo) <- 0:20 #les valeurs en en absisse de 0 à 30
names(theo)
barplot(rbind (dist_emp,theo), beside=TRUE, col = c("purple", "pink"))
source('~/Documents/L3S6stat/beteille.lisa.TP2.R')
?prob
dist_empt
dist_emp``
dist_emp
theo
source('~/Documents/L3S6stat/beteille.lisa.TP2.R')
barplot(rbind (theo, dist_emp), beside=TRUE, col = c("purple", "pink"))
rbinom
?rbinom()
bern = rbinom(1000,0,6)
bern = rbinom(1000,0.6)
bern = rbinom(1000,1000,0.6)
rbinom(1000,1000,0.6)
?sample()
sample(x= c(0,1), size= 1000, replace= TRUE, prob= 0.6)
sample(x= c(0,1), size= 1000, replace= TRUE, prob= c(1-p,p))
p = 0.6
sample(x= c(0,1), size= 1000, replace= TRUE, prob= c(1-p,p))
echantillon = sample(x= c(0,1), size= 1000, replace= TRUE, prob= c(1-p,p))
summary(echantillon)
mean(echantillon)
mean(echantillon[1:20]) #moyenne de l'échantillon
mean(echantillon[1:10]) #moyenne de l'échantillon
vect[i]=mean(echantillon[1:i])
for ( i in 2:1000){
vect[i]=mean(echantillon[1:i])
} #moyenne empirique pour n allant de 1 à n
vect= array(0,1000)
vect
vect= array(0,1000)
for ( i in 2:1000){
vect[i]=mean(echantillon[1:i])
}
vect[i]=mean(echantillon[1:i])
vect
plot(vect, type="l", ylim=(0,1))
plot(vect, type="l", ylim=(0.1))
plot(vect, type="l", ylim=(0,1))
plot(vect, type="l", ylim=c(0,1))
abline(h=0.6, col=2)
echantillon = sample(x= c(0,1), size= 1000, replace= TRUE, prob= c(1-p,p))
summary(echantillon)
mean(echantillon) #moyenne de l'échantillon (mean(echantillon[1:10]): échantillon de 10 valeurs)
vect= array(0,1000) #1000 zéros
for ( i in 2:1000){
vect[i]=mean(echantillon[1:i])
} #moyenne empirique pour n allant de 1 à n
plot(vect, type="l", ylim=c(0,1))
abline(h=0.6, col=2)
mean(echantillon) #moyenne de l'échantillon (mean(echantillon[1:10]): échantillon de 10 valeurs)
plot(vect, type="l", ylim=c(0,1), xlab="Taille échantillon", ylab="Valeur de la moyenne empirique")
abline(v=100, col=3n lty=2)
abline(v=100, col=3, lty=2)
abline(v=30, col=3, lty=2)
abline(h=0.6, col=2)
K=10
n=100
p=0.4
vect_moy_emp = array(0,1000)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect[k]=mean(echantillon)
}
vect
vect_moy_emp[k]=mean(echantillon)
vect_moy_emp
K=10
n=100
p=0.4
vect_moy_emp = array(0,1000)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
vect_moy_emp
K=10
n=100
p=0.4
vect_moy_emp = array(0,n)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
vect_moy_emp
barplot(vect_moy_emp)
K=1000
n=1000
p=0.4
vect_moy_emp = array(0,n)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
barplot(vect_moy_emp)
K=1000
n=1000
p=0.4
vect_moy_emp = array(0,n)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
hist(vect_moy_emp)
vect_moy_emp = array(0,n)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
hist(vect_moy_emp,breaks=50)
vect_moy_emp = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
hist(vect_moy_emp,breaks=50)
vect_moy_emp = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=50)
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=50)
mu=p
sigma2=p*(1-p)
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=50)
hist(vect_moy_emp,breaks=50)
hist(vect_moy_emp,breaks=50)
vect_moy_emp = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp[k]=mean(echantillon)
}
hist(vect_moy_emp,breaks=50)
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=50)
hist(vect_moy_emp_CR,breaks=40, col="orange")
hist(vect_moy_emp,breaks=50, col="green")
hist(vect_moy_emp_CR,breaks=40, col="orange")
K=10000
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=40, col="orange")
hist(vect_moy_emp_CR,breaks=30, col="orange")
hist(vect_moy_emp_CR,breaks=40, col="orange")
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=40, col="orange")
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks=30, col="orange")
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR, col="orange")
vect_moy_emp_CR = array(0,K)
for (k in 1:K){
echantillon = sample(x= c(0,1), size= n, replace= TRUE, prob= c(1-p,p))
vect_moy_emp_CR[k]=mean(echantillon-mu)/sqrt(sigma2/n)
}
hist(vect_moy_emp_CR,breaks= 30, col="orange")
n = 10
lambda = 10
a = rpois(n,lambda)
data <- matrix(rnorm(n=5000*60, mean=500, sd=100),5000,60)
condition <- c(rep(1,30), rep(2,30))
truth <- sample(c(-1,0,1),5000,replace=TRUE,prob=c(.01,.98,.01))
data[truth==1,condition==2] <- data[truth==1,condition==2] +100
data[truth==1,condition==2] <- data[truth==-1,condition==2] -100
data <- matrix(rnorm(n=5000*60, mean=500, sd=100),5000,60)
condition <- c(rep(1,30), rep(2,30))
truth <- sample(c(-1,0,1),5000,replace=TRUE,prob=c(.01,.98,.01))
data[truth==1,condition==2] <- data[truth==1,condition==2] +100
data[truth==-1,condition==2] <- data[truth==-1,condition==2] -100
sum(truth!=0)
sum(truth!=0)
hist(data)
pval <- apply(data, 1, function(x) t.test(x[condition==1],x[condition==2])$p.value)
pval
sum(pval)
sum(pval<0.05)
don <- read.table("C:/Users/Laura/Desktop/M1 MIASHS/Analyse de donn?ees multi/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
don <- read.table("C:AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
don <- read.table("AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
don <- read.table("/Users/lisabeteille/Desktop/MIASHS M1/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
res
don <- read.table("/Users/lisabeteille/Desktop/MIASHS M1/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
summary(don)
library(Factoshiny)
res<-Factoshiny(don)
install.packages("FactoMineR")
install.packages(c("Factoshiny","missMDA","FactoInvestigate"))
don <- read.table("/Users/lisabeteille/Desktop/MIASHS M1/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
summary(don)
library(Factoshiny)
res<-Factoshiny(don)
res
don <- read.table("/Users/lisabeteille/Desktop/MIASHS M1/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
summary(don)
library(Factoshiny)
res<-Factoshiny(don)
library(Factoshiny)
brew cask install xquartz
install.packages("Factoshiny")
library(Factoshiny)
install.packages("FactoMineR")
install.packages("FactoMineR")
don <- read.table("/Users/lisabeteille/Desktop/MIASHS M1/ACP/AnaDo_JeuDonnees_FertiliteEurope.csv",  header=TRUE, sep=",", row.names=1, check.names=FALSE, fileEncoding="latin1")
summary(don)
library(Factoshiny)
res<-Factoshiny(don)
library(Factoshiny)
install.packages("Factoshiny")
install.packages("yaml")
install.packages("miniUI")
install.packages("Factoshiny")
library(Factoshiny)
ozone=read.csv2("ozone.csv")
dim(ozone)
head(ozone)
#1
library(leaps)
#backward
exemple.backward<-regsubsets(maxO3~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+maxO3v,
nvmax=8,method="backward",data=ozone)
res.backward=summary(exemple.backward)
res.backward$which*1
res$rss
plot(res$rss, type="l", main="rss")
res$which*1
which.min(res$rss)
#[1] 10
which.max(res$adjr2)
#[1] 4
which.min(res$bic)
#[1] 4
which.min(res$cp)
#[1] 4
res$which[order(res$bic, decreasing = F)[1],]*1
res$which[which.min(res$bic),]*1
res$bic[which.min(res$bic)]
coef(exemple,id=1)
coef(exemple,id=which.min(res$rss))
coef(exemple,id=which.max(res$adjr2))
coef(exemple,id=which.min(res$bic))
coef(exemple,id=which.min(res$cp))
#Minimisation du R2 :
plot(exemple,scale="r2")
#Maximisation du R2a:
plot(exemple,scale="adjr2")
#Minimisation du BIC :
plot(exemple,scale="bic")
#Minimisation du Cp de Mallows :
plot(exemple,scale="Cp")
###forward
exemple.forward<-regsubsets(maxO3~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+maxO3v,
method="forward",really.big=F,data=ozone)
res.forward=summary(exemple.forward)
res.forward$which*1
coef(exemple.forward,id=which.min(res$bic))
res$bic[which.min(res$bic)]
###seqrep
exemple.<-regsubsets(maxO3~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+maxO3v,
method="seqrep",really.big=F,data=ozone)
res=summary(exemple)
res$bic[which.min(res$bic)]
###exhaustive
exemple<-regsubsets(maxO3~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+maxO3v,
nbest=2,nvmax=4,method="exhaustive",really.big=F,data=ozone)
res=summary(exemple)
plot(res$bic)
###nvmax
nb=6
exemple<-regsubsets(maxO3~T9+T12+T15+Ne9+Ne12+Ne15+Vx9+Vx12+Vx15+maxO3v,
nvmax=6,method="backward",really.big=F,data=ozone)
res=summary(exemple)
res$bic
plot(res$bic, type="l", main="bic")
plot(res$cp, type="l", main="cp")
plot(res$adjr2, type="l", main="adjr2")
res$which
res$outmat
res$obj
ozone=read.csv2("ozone.csv")
dim(ozone)
head(ozone)
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone.csv
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
ozone=read.csv2("ozone.csv")
##-- Pacotes ----
library(dplyr)
library(dbplyr)
library(data.table)
library(reshape2)
library(tidyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(rgeos)
library(shinycssloaders)
library(ggthemes)
library(RColorBrewer)
library(sf)
library(sp)
library(scales)
library(leaflet)
library(plotly)
library(highcharter)
library(DT)
library(dplyr)
library(dbplyr)
library(data.table)
library(reshape2)
library(tidyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(rgeos)
library(shinycssloaders)
library(ggthemes)
library(RColorBrewer)
library(sf)
library(sp)
library(scales)
library(leaflet)
library(plotly)
library(highcharter)
library(DT)
runApp('Desktop/MIASHS M1/MARATHON/voronoys_sc-master')
runApp('Desktop/MIASHS M1/MARATHON/voronoys_sc-master')
library(sf)
runApp('Desktop/MIASHS M1/MARATHON/voronoys_sc-master')
runApp('Desktop/MIASHS M1/MARATHON/career-pathfinder-master')
runApp('Desktop/MIASHS M1/MARATHON/Regression-master')
